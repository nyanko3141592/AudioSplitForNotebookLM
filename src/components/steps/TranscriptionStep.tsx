import { useState, useEffect, useRef } from 'react';
import { FileText, Download, Loader2, Key, AlertCircle, StopCircle, CheckCircle, XCircle, Clock, Copy, Info, RefreshCw } from 'lucide-react';
import { GeminiTranscriber, downloadTranscription } from '../../utils/geminiTranscriber';
import type { TranscriptionResult, TranscriptionProgress } from '../../utils/geminiTranscriber';
import type { SplitFile } from '../DownloadList';
import { apiKeyStorage, localStorage } from '../../utils/storage';
import { StepContent } from '../StepContent';
import { ResultsSummary } from '../ResultsSummary';

interface TranscriptionStepProps {
  splitFiles: SplitFile[];
  transcriptionResults?: TranscriptionResult[];
  onNext?: () => void;
  showNext?: boolean;
  nextButtonText?: string;
  onDownloadSplit?: (file: SplitFile) => void;
  onDownloadAllSplits?: () => void;
  onTranscriptionComplete?: (results: TranscriptionResult[]) => void;
}

export function TranscriptionStep({ 
  splitFiles, 
  transcriptionResults: parentTranscriptionResults,
  onNext, 
  showNext = true, 
  nextButtonText = "„Åæ„Å®„ÇÅ„Å∏",
  onDownloadSplit,
  onDownloadAllSplits,
  onTranscriptionComplete
}: TranscriptionStepProps) {
  const [apiKey, setApiKey] = useState('');
  const [isTranscribing, setIsTranscribing] = useState(false);
  const [transcriptionResults, setTranscriptionResults] = useState<TranscriptionResult[]>(parentTranscriptionResults || []);
  const [currentProgress, setCurrentProgress] = useState<TranscriptionProgress>({ 
    current: 0, 
    total: 0, 
    status: '', 
    fileStates: new Map() 
  });
  const [error, setError] = useState<string | null>(null);
  const transcriberRef = useRef<GeminiTranscriber | null>(null);
  const [customPrompt, setCustomPrompt] = useState('');
  const [backgroundInfo, setBackgroundInfo] = useState('');
  const [showApiKeyInput, setShowApiKeyInput] = useState(false);
  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);
  const [concurrencySettings, setConcurrencySettings] = useState({
    enabled: false,
    count: 2,
    delay: 1000
  });
  
  const defaultPrompt = `„Åì„ÅÆÈü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÊ≠£Á¢∫„Å´ÊñáÂ≠óËµ∑„Åì„Åó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
‰ª•‰∏ã„ÅÆÁÇπ„Å´Ê≥®ÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
- Ë©±ËÄÖ„ÅÆÁô∫Ë®Ä„ÇíÂø†ÂÆü„Å´ÊñáÂ≠óËµ∑„Åì„Åó„Åô„Çã
- ÈÅ©Âàá„Å™Âè•Ë™≠ÁÇπ„ÇíËøΩÂä†„Åô„Çã
- Â∞ÇÈñÄÁî®Ë™û„ÇÑÂõ∫ÊúâÂêçË©û„ÅØÊ≠£Á¢∫„Å´Ë®òËºâ„Åô„Çã
- „Éï„Ç£„É©„ÉºË™ûÔºà„Åà„Éº„ÄÅ„ÅÇ„ÅÆ„ÉºÁ≠âÔºâ„ÅØÈÅ©Â∫¶„Å´ÁúÅÁï•„Åó„Å¶Ë™≠„Åø„ÇÑ„Åô„Åè„Åô„Çã
- Ë§áÊï∞„ÅÆË©±ËÄÖ„Åå„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅË©±ËÄÖ„ÇíÂå∫Âà•„Åó„Å¶Ë®òËºâ„Åô„Çã

ÊñáÂ≠óËµ∑„Åì„ÅóÁµêÊûú„ÅÆ„Åø„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`;

  // ÂàùÂõûË™≠„ÅøËæº„ÅøÊôÇ„Å´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„Éá„Éº„Çø„ÇíÂæ©ÂÖÉ
  useEffect(() => {
    const savedApiKey = apiKeyStorage.get();
    const savedPrompt = localStorage.getCustomPrompt();
    
    if (savedApiKey) {
      setApiKey(savedApiKey);
      setShowApiKeyInput(false); // API„Ç≠„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÈùûË°®Á§∫
    } else {
      setShowApiKeyInput(true); // API„Ç≠„Éº„Åå„Å™„ÅÑÂ†¥Âêà„ÅØË°®Á§∫
    }
    
    if (savedPrompt) {
      setCustomPrompt(savedPrompt);
    }
  }, []);

  // Ë¶™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åã„ÇâÁµêÊûú„ÅåÊ∏°„Åï„Çå„ÅüÂ†¥Âêà„Å´Êõ¥Êñ∞
  useEffect(() => {
    if (parentTranscriptionResults && parentTranscriptionResults.length > 0) {
      setTranscriptionResults(parentTranscriptionResults);
    }
  }, [parentTranscriptionResults]);

  const handleApiKeyChange = (value: string) => {
    setApiKey(value);
    apiKeyStorage.save(value);
  };

  const handleCustomPromptChange = (value: string) => {
    setCustomPrompt(value);
    localStorage.saveCustomPrompt(value);
  };

  const handleTranscribe = async () => {
    if (!apiKey) {
      setError('API„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    if (splitFiles.length === 0) {
      setError('ÊñáÂ≠óËµ∑„Åì„Åó„Åô„ÇãÈü≥Â£∞„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    setError(null);
    setIsTranscribing(true);
    setTranscriptionResults([]);

    try {
      const transcriber = new GeminiTranscriber(apiKey);
      transcriberRef.current = transcriber;
      
      const concurrency = concurrencySettings.enabled ? concurrencySettings.count : 1;
      const delay = concurrencySettings.delay;
      
      const results = await transcriber.transcribeMultipleBlobs(
        splitFiles.map(f => f.blob),
        splitFiles.map(f => f.name),
        (progress: TranscriptionProgress) => {
          setCurrentProgress(progress);
        },
        delay,
        customPrompt || undefined,
        concurrency
      );

      setTranscriptionResults(results);
      onTranscriptionComplete?.(results);
    } catch (error) {
      console.error('Transcription error:', error);
      if (error instanceof Error && error.message !== '„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü') {
        setError(error.message);
      } else {
        setError('ÊñáÂ≠óËµ∑„Åì„Åó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } finally {
      setIsTranscribing(false);
      transcriberRef.current = null;
      setCurrentProgress({ current: 0, total: 0, status: '', fileStates: new Map() });
    }
  };

  const handleCopyTranscription = () => {
    if (transcriptionResults.length > 0) {
      const transcriber = new GeminiTranscriber();
      const formatted = transcriber.formatTranscriptions(transcriptionResults);
      navigator.clipboard.writeText(formatted);
      // TODO: Add toast notification for copy success
    }
  };

  const handleCancelTranscription = () => {
    if (transcriberRef.current) {
      transcriberRef.current.cancelTranscription();
    }
  };

  const handleDownloadTranscription = () => {
    if (transcriptionResults.length > 0) {
      const transcriber = new GeminiTranscriber();
      const formatted = transcriber.formatTranscriptions(transcriptionResults);
      downloadTranscription(formatted);
    }
  };

  const hasResults = transcriptionResults.length > 0;
  const successCount = transcriptionResults.filter(r => !r.error).length;
  const canProceed = hasResults && successCount > 0;

  if (isTranscribing) {
    return (
      <StepContent
        title="üìù ÊñáÂ≠óËµ∑„Åì„ÅóÂÆüË°å‰∏≠"
        description="Gemini API„ÅßÈü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÊñáÂ≠óËµ∑„Åì„Åó„Åó„Å¶„ÅÑ„Åæ„Åô..."
        showNext={false}
      >
        <div className="space-y-4">
          <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-sm text-blue-700 font-medium">{currentProgress.status}</p>
          </div>
          
          {currentProgress.fileStates.size > 0 && (
            <div className="space-y-2">
              <p className="text-sm font-medium text-gray-700">ÂêÑ„Éï„Ç°„Ç§„É´„ÅÆÁä∂ÊÖã</p>
              <div className="grid gap-2">
                {Array.from(currentProgress.fileStates.entries()).map(([partNumber, result]) => (
                  <div key={partNumber} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        {result.status === 'pending' && <Clock className="w-4 h-4 text-gray-400" />}
                        {result.status === 'processing' && <Loader2 className="w-4 h-4 text-blue-500 animate-spin" />}
                        {result.status === 'completed' && <CheckCircle className="w-4 h-4 text-green-500" />}
                        {result.status === 'error' && <XCircle className="w-4 h-4 text-red-500" />}
                        {result.status === 'cancelled' && <StopCircle className="w-4 h-4 text-orange-500" />}
                      </div>
                      <span className="text-sm text-gray-700">{result.fileName}</span>
                    </div>
                    <div className="text-xs text-gray-500">
                      {result.status === 'pending' && 'ÂæÖÊ©ü‰∏≠'}
                      {result.status === 'processing' && 'Âá¶ÁêÜ‰∏≠'}
                      {result.status === 'completed' && 'ÂÆå‰∫Ü'}
                      {result.status === 'error' && '„Ç®„É©„Éº'}
                      {result.status === 'cancelled' && '„Ç≠„É£„É≥„Çª„É´'}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <div className="flex justify-center">
            <button
              onClick={handleCancelTranscription}
              className="px-6 py-2 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2"
            >
              <StopCircle className="w-5 h-5" />
              ‰∏≠Ê≠¢
            </button>
          </div>
        </div>
      </StepContent>
    );
  }

  return (
    <StepContent
      title="üìù ÊñáÂ≠óËµ∑„Åì„Åó"
      description="Gemini API„Çí‰ΩøÁî®„Åó„Å¶Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÊñáÂ≠óËµ∑„Åì„Åó„Åó„Åæ„Åô"
      nextButtonText={nextButtonText}
      onNext={onNext}
      nextDisabled={!canProceed}
      showNext={showNext && canProceed}
    >
      {/* Previous Results Summary */}
      {splitFiles.length > 0 && (
        <ResultsSummary
          splitFiles={splitFiles}
          onDownloadSplit={onDownloadSplit}
          onDownloadAllSplits={onDownloadAllSplits}
          compact
        />
      )}

      {/* API Key Status/Input */}
      {showApiKeyInput ? (
        <div className="space-y-2">
          <label htmlFor="api-key" className="flex items-center gap-2 text-sm font-medium text-gray-700">
            <Key className="w-4 h-4" />
            Gemini API „Ç≠„Éº
          </label>
          <input
            id="api-key"
            type="password"
            value={apiKey}
            onChange={(e) => handleApiKeyChange(e.target.value)}
            placeholder="AIzaSy..."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent"
          />
          <p className="text-xs text-gray-500">
            <a 
              href="https://aistudio.google.com/app/apikey" 
              target="_blank" 
              rel="noopener noreferrer"
              className="text-violet-600 hover:underline"
            >
              Google AI Studio
            </a>
            „ÅßAPI„Ç≠„Éº„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          </p>
        </div>
      ) : (
        <div className="flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-600" />
            <span className="text-sm font-medium text-green-800">API„Ç≠„ÉºË®≠ÂÆöÊ∏à„Åø</span>
          </div>
          <button
            onClick={() => setShowApiKeyInput(true)}
            className="text-xs text-green-700 hover:text-green-800 underline"
          >
            Â§âÊõ¥
          </button>
        </div>
      )}

      {/* „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„Éà - „Éá„Éï„Ç©„É´„ÉàË°®Á§∫ */}
      <div className="space-y-2">
        <label htmlFor="custom-prompt" className="text-sm font-medium text-gray-700">
          „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„ÉàÔºàÁ©∫Ê¨Ñ„ÅÆÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà„Çí‰ΩøÁî®Ôºâ
        </label>
        <textarea
          id="custom-prompt"
          value={customPrompt}
          onChange={(e) => handleCustomPromptChange(e.target.value)}
          placeholder={defaultPrompt}
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent h-32 font-mono text-sm"
        />
        <div className="flex gap-2">
          <button
            onClick={() => handleCustomPromptChange(defaultPrompt)}
            className="text-xs text-gray-500 hover:text-gray-700"
          >
            „Éá„Éï„Ç©„É´„Éà„Å´Êàª„Åô
          </button>
          <button
            onClick={() => handleCustomPromptChange('')}
            className="text-xs text-gray-500 hover:text-gray-700"
          >
            „ÇØ„É™„Ç¢
          </button>
        </div>
      </div>

      {/* ËÉåÊôØÊÉÖÂ†± - „Éá„Éï„Ç©„É´„ÉàË°®Á§∫ */}
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <label className="text-sm font-medium text-gray-700 flex items-center gap-1">
            <Info className="w-4 h-4" />
            ËÉåÊôØÊÉÖÂ†±ÔºàÊñáÂ≠óËµ∑„Åì„ÅóÁ≤æÂ∫¶Âêë‰∏äÔºâ
          </label>
          <button
            onClick={() => setBackgroundInfo('')}
            className="text-xs text-gray-600 hover:text-gray-700 flex items-center gap-1"
          >
            <RefreshCw className="w-3 h-3" />
            „ÇØ„É™„Ç¢
          </button>
        </div>
        <textarea
          value={backgroundInfo}
          onChange={(e) => setBackgroundInfo(e.target.value)}
          placeholder="‰æã: 2024Âπ¥1Êúà26Êó•„ÅÆÂÆö‰æã‰ºöË≠∞„ÄÇÂèÇÂä†ËÄÖÔºöÁî∞‰∏≠ÔºàÂñ∂Ê•≠Ôºâ„ÄÅ‰ΩêËó§Ôºà„Éû„Éº„Ç±Ôºâ„ÄÅÈà¥Êú®ÔºàÈñãÁô∫Ôºâ„ÄÇË≠∞È°åÔºöÊñ∞ÂïÜÂìÅ„ÅÆ„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞Êà¶Áï•"
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent h-16 font-mono text-sm resize-none bg-blue-50"
        />
        <p className="text-xs text-gray-500">
          ‚Äª ‰ºöË≠∞„ÅÆÊó•ÊôÇ„ÄÅÂèÇÂä†ËÄÖ„ÄÅË≠∞È°å„Å™„Å©„ÇíÂÖ•Âäõ„Åô„Çã„Å®„ÄÅÂõ∫ÊúâÂêçË©û„ÇÑÂ∞ÇÈñÄÁî®Ë™û„ÅÆË™çË≠òÁ≤æÂ∫¶„ÅåÂêë‰∏ä„Åó„Åæ„Åô
        </p>
      </div>
      
      {/* Ë©≥Á¥∞Ë®≠ÂÆö„Éà„Ç∞„É´ */}
      <div className="space-y-4">
        <button
          onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}
          className="text-sm text-violet-600 hover:text-violet-700 font-medium"
        >
          {showAdvancedSettings ? '‚ñº' : '‚ñ∂'} Ë©≥Á¥∞Ë®≠ÂÆöÔºà‰∏¶ÂàóÂá¶ÁêÜ„Å™„Å©Ôºâ
        </button>
        
        {showAdvancedSettings && (
          <div className="space-y-4 p-4 bg-gray-50 rounded-lg">


            {/* Concurrency Settings */}
            <div className="space-y-3">
              <label className="text-sm font-medium text-gray-700">Âá¶ÁêÜË®≠ÂÆö</label>
              <div className="space-y-3">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={concurrencySettings.enabled}
                    onChange={(e) => setConcurrencySettings(prev => ({ ...prev, enabled: e.target.checked }))}
                    className="mr-2"
                  />
                  <span className="text-sm">‰∏¶ÂàóÂá¶ÁêÜ„ÇíÊúâÂäπ„Å´„Åô„ÇãÔºàÈ´òÈÄüÂåñ„ÉªAPI‰ΩøÁî®ÈáèÂ¢óÂä†Ôºâ</span>
                </label>
                
                {concurrencySettings.enabled && (
                  <div className="ml-6 space-y-2">
                    <div>
                      <label className="text-xs text-gray-600">ÂêåÊôÇÂá¶ÁêÜÊï∞</label>
                      <select
                        value={concurrencySettings.count}
                        onChange={(e) => setConcurrencySettings(prev => ({ ...prev, count: parseInt(e.target.value) }))}
                        className="ml-2 px-2 py-1 border border-gray-300 rounded text-sm"
                      >
                        <option value={2}>2ÂÄã</option>
                        <option value={3}>3ÂÄã</option>
                        <option value={4}>4ÂÄã</option>
                        <option value={5}>5ÂÄã</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="text-xs text-gray-600">„É™„ÇØ„Ç®„Çπ„ÉàÈñìÈöîÔºàmsÔºâ</label>
                      <select
                        value={concurrencySettings.delay}
                        onChange={(e) => setConcurrencySettings(prev => ({ ...prev, delay: parseInt(e.target.value) }))}
                        className="ml-2 px-2 py-1 border border-gray-300 rounded text-sm"
                      >
                        <option value={500}>500msÔºàÈ´òÈÄüÔºâ</option>
                        <option value={1000}>1000msÔºàÊ®ôÊ∫ñÔºâ</option>
                        <option value={2000}>2000msÔºàÂÆâÂÖ®Ôºâ</option>
                        <option value={3000}>3000msÔºà‰øùÂÆàÁöÑÔºâ</option>
                      </select>
                    </div>
                    
                    <p className="text-xs text-orange-600">
                      ‚ö†Ô∏è ‰∏¶ÂàóÂá¶ÁêÜ„ÅØAPI‰ΩøÁî®Èáè„ÅåÂ¢óÂä†„Åó„ÄÅ„É¨„Éº„ÉàÂà∂Èôê„Å´Âºï„Å£„Åã„Åã„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Error Message */}
      {error && (
        <div className="flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg">
          <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0" />
          <p className="text-sm text-red-700">{error}</p>
        </div>
      )}

      {/* Transcribe Button */}
      <button
        onClick={handleTranscribe}
        disabled={!apiKey || splitFiles.length === 0}
        className="w-full px-6 py-3 bg-gradient-to-r from-violet-600 to-purple-600 text-white font-semibold rounded-xl hover:from-violet-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center gap-2"
      >
        <FileText className="w-5 h-5" />
        ÊñáÂ≠óËµ∑„Åì„Åó„ÇíÈñãÂßã ({splitFiles.length}„Éï„Ç°„Ç§„É´)
      </button>

      {/* Results */}
      {hasResults && (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              ÂÆå‰∫Ü: {successCount}/{transcriptionResults.length} „Éï„Ç°„Ç§„É´
            </div>
            <div className="flex gap-2">
              <button
                onClick={handleCopyTranscription}
                className="px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
              >
                <Copy className="w-4 h-4" />
                „Ç≥„Éî„Éº
              </button>
              <button
                onClick={handleDownloadTranscription}
                className="px-4 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
              >
                <Download className="w-4 h-4" />
                „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
              </button>
            </div>
          </div>

          {/* Results Preview */}
          <div className="max-h-60 overflow-y-auto border border-gray-200 rounded-lg p-4 space-y-4">
            {transcriptionResults.map((result) => (
              <div key={result.partNumber} className="space-y-2">
                <h3 className="font-semibold text-gray-800">
                  „Éë„Éº„Éà {result.partNumber}: {result.fileName}
                </h3>
                {result.error ? (
                  <p className="text-sm text-red-600">„Ç®„É©„Éº: {result.error}</p>
                ) : (
                  <p className="text-sm text-gray-700 whitespace-pre-wrap">
                    {result.transcription.slice(0, 150)}
                    {result.transcription.length > 150 && '...'}
                  </p>
                )}
              </div>
            ))}
          </div>
          
          <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
            <p className="text-sm text-green-800">
              üí° „Åì„Åì„ÅßÂÅúÊ≠¢„Åó„Å¶ÊñáÂ≠óËµ∑„Åì„ÅóÁµêÊûú„ÅÆ„Åø‰ΩøÁî®„Åô„Çã„Åì„Å®„ÇÇÂèØËÉΩ„Åß„Åô„ÄÇ
              „Åæ„Å®„ÇÅÊ©üËÉΩ„Çí‰Ωø„ÅÑ„Åü„ÅÑÂ†¥Âêà„ÅØ„Äå{nextButtonText}„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </p>
          </div>
        </div>
      )}
    </StepContent>
  );
}